// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NuveiMobileSDK
import AdSupport
import CommonCrypto
import Compression
import CoreLocation
import CryptoSwift
import Foundation
import JOSESwift
@_exported import NuveiMobileSDK
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
public enum NVFailure : Swift.Error {
  case unknown, invalidInput, `internal`(Swift.Int, Swift.String, [Swift.String : Any]?)
  public var code: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
  public var raw: [Swift.String : Any]? {
    get
  }
}
public class NuveiToolbarCustomization : NuveiMobileSDK.NuveiBaseCustomization {
  public init(headerText: Swift.String = "SECURE CHECKOUT", textFont: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 22), textColor: UIKit.UIColor = .white, backgroundColor: UIKit.UIColor = .nuveiDefaultColor)
  @objc deinit
}
public enum NuveiButtonType {
  case submit
  case `continue`
  case next
  case cancel
  case resend
  public var string: Swift.String {
    get
  }
  public static func == (a: NuveiMobileSDK.NuveiButtonType, b: NuveiMobileSDK.NuveiButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class NuveiButtonCustomization : NuveiMobileSDK.NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 17), textColor: UIKit.UIColor = .black, backgroundColor: UIKit.UIColor = .white, cornerRadius: Swift.Int = 0)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class JWEHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public class NVBillingAddress : Swift.Encodable {
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let county: Swift.String?
  final public let city: Swift.String?
  final public let address: Swift.String?
  final public let addressLine2: Swift.String?
  final public let addressLine3: Swift.String?
  final public let zip: Swift.String?
  final public let addressMatch: Swift.String?
  final public let email: Swift.String?
  final public let phone: Swift.String?
  final public let cell: Swift.String?
  final public let homePhone: Swift.String?
  final public let workPhone: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, county: Swift.String? = nil, city: Swift.String? = nil, address: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, zip: Swift.String? = nil, addressMatch: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, cell: Swift.String? = nil, homePhone: Swift.String? = nil, workPhone: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class NVShippingAddress : Swift.Encodable {
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let county: Swift.String?
  final public let city: Swift.String?
  final public let address: Swift.String?
  final public let addressLine2: Swift.String?
  final public let addressLine3: Swift.String?
  final public let zip: Swift.String?
  final public let addressMatch: Swift.String?
  final public let email: Swift.String?
  final public let phone: Swift.String?
  final public let cell: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, county: Swift.String? = nil, city: Swift.String? = nil, address: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, zip: Swift.String? = nil, addressMatch: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, cell: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct Authenticate3dInput : Swift.Encodable {
  public let sessionToken: Swift.String
  public let merchantId: Swift.String
  public let merchantSiteId: Swift.String
  public let currency: Swift.String
  public let amount: Swift.String
  public let paymentOption: NuveiMobileSDK.PaymentOption
  public let userTokenId: Swift.String?
  public let clientUniqueId: Swift.String?
  public let clientRequestId: Swift.String?
  public let customData: Swift.String?
  public let billingAddress: NuveiMobileSDK.NVBillingAddress?
  public let shippingAddress: NuveiMobileSDK.NVShippingAddress?
  public let userDetails: NuveiMobileSDK.UserDetails?
  public let merchantDetails: NuveiMobileSDK.MerchantDetails?
  public let dynamicDescriptor: NuveiMobileSDK.DynamicDescriptor?
  public let timeout: Swift.Int
  public let requestTimeout: Swift.Int
  public init(sessionToken: Swift.String, merchantId: Swift.String, merchantSiteId: Swift.String, currency: Swift.String, amount: Swift.String, paymentOption: NuveiMobileSDK.PaymentOption, userTokenId: Swift.String? = nil, clientUniqueId: Swift.String? = nil, clientRequestId: Swift.String? = nil, customData: Swift.String? = nil, billingAddress: NuveiMobileSDK.NVBillingAddress? = nil, shippingAddress: NuveiMobileSDK.NVShippingAddress? = nil, userDetails: NuveiMobileSDK.UserDetails? = nil, merchantDetails: NuveiMobileSDK.MerchantDetails? = nil, dynamicDescriptor: NuveiMobileSDK.DynamicDescriptor? = nil, timeout: Swift.Int = 10, requestTimeout: Swift.Int = 40)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct UserDetails : Swift.Encodable {
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let address: Swift.String?
  public let zip: Swift.String?
  public let state: Swift.String?
  public let email: Swift.String?
  public let phone: Swift.String?
  public let city: Swift.String?
  public let country: Swift.String?
  public let county: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, address: Swift.String? = nil, zip: Swift.String? = nil, state: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil, county: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MerchantDetails : Swift.Encodable {
  public let customField1: Swift.String?
  public let customField2: Swift.String?
  public let customField3: Swift.String?
  public let customField4: Swift.String?
  public let customField5: Swift.String?
  public let customField6: Swift.String?
  public let customField7: Swift.String?
  public let customField8: Swift.String?
  public let customField9: Swift.String?
  public let customField10: Swift.String?
  public let customField11: Swift.String?
  public let customField12: Swift.String?
  public let customField13: Swift.String?
  public let customField14: Swift.String?
  public let customField15: Swift.String?
  public init(customField1: Swift.String? = nil, customField2: Swift.String? = nil, customField3: Swift.String? = nil, customField4: Swift.String? = nil, customField5: Swift.String? = nil, customField6: Swift.String? = nil, customField7: Swift.String? = nil, customField8: Swift.String? = nil, customField9: Swift.String? = nil, customField10: Swift.String? = nil, customField11: Swift.String? = nil, customField12: Swift.String? = nil, customField13: Swift.String? = nil, customField14: Swift.String? = nil, customField15: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DynamicDescriptor : Swift.Encodable {
  public let merchantName: Swift.String?
  public let merchantPhone: Swift.String?
  public init(merchantName: Swift.String? = nil, merchantPhone: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct EcdhEsJweHeader : NuveiMobileSDK.JSONWebEncryptionHeader {
  public init(alg: Swift.String, enc: Swift.String)
  public init(parameters: [Swift.String : Any]) throws
  public init(jsonData: Foundation.Data) throws
  public init(b64uData: Foundation.Data) throws
  public init(cloneFrom: NuveiMobileSDK.JSONWebEncryptionHeader) throws
  public func jsonSerializedData() -> Foundation.Data
  public func allParameters() -> [Swift.String : Any]
}
extension NuveiMobileSDK.EcdhEsJweHeader {
  public var alg: Swift.String {
    get
    set
  }
  public var enc: Swift.String {
    get
    set
  }
  public var epk: JOSESwift.ECPublicKey? {
    get
    set
  }
  public var apu: Swift.String? {
    get
    set
  }
  public var apv: Swift.String? {
    get
    set
  }
}
extension NuveiMobileSDK.EcdhEsJweHeader {
  public subscript(index: Swift.String) -> Any? {
    get
    set
  }
}
public protocol JWEEncryptor {
  func encrypt(plaintext: Foundation.Data, key: JOSESwift.JWK, header: NuveiMobileSDK.JSONWebEncryptionHeader, options: [Swift.String : Any]) throws -> (header: NuveiMobileSDK.JSONWebEncryptionHeader, encryptedKey: Foundation.Data, iv: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data)
  func decrypt(key: JOSESwift.JWK, header: NuveiMobileSDK.JSONWebEncryptionHeader, encryptedKey: Foundation.Data, iv: Foundation.Data, ciphertext: Foundation.Data, tag: Foundation.Data, aad: Foundation.Data) throws -> Foundation.Data
}
public class NuveiTextBoxCustomization : NuveiMobileSDK.NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, borderColor: UIKit.UIColor = .black, cornerRadius: Swift.Int = 0, borderWidth: Swift.Int = 1)
  @objc deinit
}
public class NuveiLabelCustomization : NuveiMobileSDK.NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), textColor: UIKit.UIColor = .black, headingTextFont: UIKit.UIFont = UIFont.systemFont(ofSize: 14), headingTextColor: UIKit.UIColor = .white)
  @objc deinit
}
public class Authenticate3dOutput {
  public enum NuveiAuth3dResult : Swift.String {
    case approved, declined, cancelled, error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let result: NuveiMobileSDK.Authenticate3dOutput.NuveiAuth3dResult
  final public let userPaymentOptionId: Swift.String?
  final public let cavv: Swift.String?
  final public let eci: Swift.String?
  final public let xid: Swift.String?
  final public let dsTransID: Swift.String?
  final public let ccCardNumber: Swift.String?
  final public let bin: Swift.String?
  final public let last4Digits: Swift.String?
  final public let ccExpMonth: Swift.String?
  final public let ccExpYear: Swift.String?
  final public let ccTempToken: Swift.String?
  final public let transactionId: Swift.String?
  final public let threeDReasonId: Swift.String?
  final public let threeDReason: Swift.String?
  final public let challengePreferenceReason: Swift.String?
  final public let isLiabilityOnIssuer: Swift.Bool?
  final public let challengeCancelReasonId: Swift.String?
  final public let challengeCancelReason: Swift.String?
  final public let errorCode: Swift.Int?
  final public let errorDescription: Swift.String?
  final public let rawResult: [Swift.String : Any]?
  public init(result: NuveiMobileSDK.Authenticate3dOutput.NuveiAuth3dResult, userPaymentOptionId: Swift.String? = nil, cavv: Swift.String? = nil, eci: Swift.String? = nil, xid: Swift.String? = nil, dsTransID: Swift.String? = nil, ccCardNumber: Swift.String? = nil, bin: Swift.String? = nil, last4Digits: Swift.String? = nil, ccExpMonth: Swift.String? = nil, ccExpYear: Swift.String? = nil, ccTempToken: Swift.String? = nil, transactionId: Swift.String? = nil, threeDReasonId: Swift.String? = nil, threeDReason: Swift.String? = nil, challengePreferenceReason: Swift.String? = nil, isLiabilityOnIssuer: Swift.Bool? = nil, challengeCancelReasonId: Swift.String? = nil, challengeCancelReason: Swift.String? = nil, errorCode: Swift.Int? = nil, errorDescription: Swift.String? = nil, rawResult: [Swift.String : Any]? = nil)
  @objc deinit
}
public protocol JSONWebEncryption {
  var header: NuveiMobileSDK.JSONWebEncryptionHeader { get }
  var encryptedKey: Foundation.Data { get }
  var initializationVector: Foundation.Data { get }
  var ciphertext: Foundation.Data { get }
  var authenticationTag: Foundation.Data { get }
  var compactSerializedString: Swift.String { get }
  var compactSerializedData: Foundation.Data { get }
  var additionalAuthenticatedData: Foundation.Data { get }
  func decrypt(key: JOSESwift.JWK) throws -> Foundation.Data
}
public enum Authenticate3dFailure {
  case unknown, invalidInput
  public static func == (a: NuveiMobileSDK.Authenticate3dFailure, b: NuveiMobileSDK.Authenticate3dFailure) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension JOSESwift.ECCurveType {
  public var bitLength: Swift.Int {
    get
  }
}
extension JOSESwift.ECPrivateKey {
  public func getPublic() -> JOSESwift.ECPublicKey
  public func isCorrespondWith(_ key: JOSESwift.ECPublicKey) -> Swift.Bool
}
extension JOSESwift.ECPrivateKey {
  public func getPrivate() -> JOSESwift.ECPrivateKey
}
public func generateECKeyPair(curveType: JOSESwift.ECCurveType) throws -> JOSESwift.ECKeyPair
extension JOSESwift.JWK {
  public func dictionarized() -> [Swift.String : Swift.String]
  public init(dictionary: [Swift.String : Any]) throws
}
extension UIKit.UIColor {
  public static var nuveiDefaultColor: UIKit.UIColor
}
public struct PaymentOption : Swift.Encodable {
  public let userPaymentOptionId: Swift.String?
  public let card: NuveiMobileSDK.CardDetails?
  public init(userPaymentOptionId: Swift.String? = nil, card: NuveiMobileSDK.CardDetails? = nil) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CardDetails : Swift.Encodable {
  public let cardNumber: Swift.String?
  public let cardHolderName: Swift.String?
  public let CVV: Swift.String?
  public let expirationMonth: Swift.String?
  public let expirationYear: Swift.String?
  public init(cardNumber: Swift.String? = nil, cardHolderName: Swift.String? = nil, cvv: Swift.String? = nil, expirationMonth: Swift.String?, expirationYear: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CompletionEvent {
  @objc deinit
}
public struct EcdhEsJwe : NuveiMobileSDK.JSONWebEncryption {
  public let header: NuveiMobileSDK.JSONWebEncryptionHeader
  public let encryptedKey: Foundation.Data
  public let initializationVector: Foundation.Data
  public var ciphertext: Foundation.Data
  public var authenticationTag: Foundation.Data
  public var additionalAuthenticatedData: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public func decrypt(key: JOSESwift.JWK) throws -> Foundation.Data
  public func decrypt(privKeyJwkJson: Foundation.Data) throws -> Foundation.Data
  public func decrypt(privKeyJwkJson: Swift.String) throws -> Foundation.Data
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Foundation.Data, header: NuveiMobileSDK.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Swift.String, header: NuveiMobileSDK.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKey: JOSESwift.ECPublicKey, header: NuveiMobileSDK.JSONWebEncryptionHeader, options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Foundation.Data, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKeyJwkJson: Swift.String, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(plaintext: Foundation.Data, pubKey: JOSESwift.ECPublicKey, headerDic: [Swift.String : Any] = [:], options: [Swift.String : Any] = [:]) throws
  public init(compactSerializedString: Swift.String) throws
  public init(compactSerializedData: Foundation.Data) throws
}
public class NuveiUICustomization {
  public init(toolbarCustomization: NuveiMobileSDK.NuveiToolbarCustomization = NuveiToolbarCustomization(), labelCustomization: NuveiMobileSDK.NuveiLabelCustomization = NuveiLabelCustomization(), textBoxCustomization: NuveiMobileSDK.NuveiTextBoxCustomization = NuveiTextBoxCustomization())
  public func setButtonCustomization(_ buttonCustomization: NuveiMobileSDK.NuveiButtonCustomization, for buttonType: NuveiMobileSDK.NuveiButtonType)
  public func buttonCustomization(for buttonType: NuveiMobileSDK.NuveiButtonType) -> NuveiMobileSDK.NuveiButtonCustomization
  @objc deinit
}
public protocol JSONWebEncryptionHeader {
  var alg: Swift.String { get }
  var enc: Swift.String { get }
  var epk: JOSESwift.ECPublicKey? { get }
  var apu: Swift.String? { get }
  var apv: Swift.String? { get }
  subscript(index: Swift.String) -> Any? { get }
  func jsonSerializedData() -> Foundation.Data
  func allParameters() -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers public class NuveiMobile {
  public enum Environment {
    case production, integration
    public static func == (a: NuveiMobileSDK.NuveiMobile.Environment, b: NuveiMobileSDK.NuveiMobile.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let sdkVersion: Swift.String
  public static var environment: NuveiMobileSDK.NuveiMobile.Environment?
  public static var customization: NuveiMobileSDK.NuveiUICustomization?
  public static func setup(environment: NuveiMobileSDK.NuveiMobile.Environment = .production, customization: NuveiMobileSDK.NuveiUICustomization = NuveiUICustomization())
  public static func authenticate3d(viewController: UIKit.UIViewController, input: NuveiMobileSDK.Authenticate3dInput, additionalParams: [Swift.String : Any] = [:], forceWebChallenge: Swift.Bool = true, callback: @escaping (NuveiMobileSDK.Authenticate3dOutput) -> ())
  public static func getEnvBaseUrl() -> Swift.String
  @objc deinit
}
public class NuveiBaseCustomization {
  public init(textFont: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc deinit
}
extension NuveiMobileSDK.NuveiButtonType : Swift.Equatable {}
extension NuveiMobileSDK.NuveiButtonType : Swift.Hashable {}
extension NuveiMobileSDK.Authenticate3dOutput.NuveiAuth3dResult : Swift.Equatable {}
extension NuveiMobileSDK.Authenticate3dOutput.NuveiAuth3dResult : Swift.Hashable {}
extension NuveiMobileSDK.Authenticate3dOutput.NuveiAuth3dResult : Swift.RawRepresentable {}
extension NuveiMobileSDK.Authenticate3dFailure : Swift.Equatable {}
extension NuveiMobileSDK.Authenticate3dFailure : Swift.Hashable {}
extension NuveiMobileSDK.NuveiMobile.Environment : Swift.Equatable {}
extension NuveiMobileSDK.NuveiMobile.Environment : Swift.Hashable {}
